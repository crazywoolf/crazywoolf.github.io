{"remainingRequest":"/Users/i.frolova/IdeaProjects/resume/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/i.frolova/IdeaProjects/resume/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/i.frolova/IdeaProjects/resume/src/App.vue","mtime":1582123402106},{"path":"/Users/i.frolova/IdeaProjects/resume/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/i.frolova/IdeaProjects/resume/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/i.frolova/IdeaProjects/resume/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* https://github.com/chris-pearce/backpack.css */\nimport 'backpack.css';\n\nimport Header from '@/components/Header.vue';\n\n/* meta info (for title) */\nimport meta from '@/assets/data/meta';\n\n/* 'new content available' badge */\n// const Updated = () => import('@/components/Updated.vue');\n\nexport default {\n    name: 'App',\n\n    metaInfo: {\n        titleTemplate: titleChunk => {\n            return titleChunk ? `${titleChunk} - ${meta.title}` : meta.title;\n        }\n    },\n\n    components: {\n        Header\n    },\n\n    data() {\n        return {\n            isScrolling: false\n        };\n    },\n\n    created() {\n        this.progressOnRouting();\n\n        this.removeLoadingClass();\n    },\n\n    mounted() {\n        this.$Progress.finish();\n\n        this.calculateVH();\n        window.addEventListener('scroll', () => {\n            if (pageYOffset > 100 && !this.isScrolling) {\n                this.isScrolling = true;\n            } else if (pageYOffset <= 100 && this.isScrolling) {\n                this.isScrolling = false;\n            }\n        });\n    },\n\n    methods: {\n        progressOnRouting() {\n            this.$Progress.start();\n\n            this.$router.beforeEach((to, from, next) => {\n                this.$Progress.start();\n                next();\n            });\n\n            this.$router.afterEach(() => {\n                this.$Progress.finish();\n            });\n        },\n\n        removeLoadingClass() {\n            const listener = () => {\n                document.body.classList.remove('js-loading');\n                window.removeEventListener('load', listener);\n            };\n            window.addEventListener('load', listener);\n        },\n\n        calculateVH() {\n            const setVH = () => {\n                const vh = window.innerHeight * 0.01;\n                document.documentElement.style.setProperty('--vh', `${vh}px`);\n            };\n\n            setVH();\n\n            /* resize */\n            (function() {\n                const throttle = function(type, name, obj) {\n                    obj = obj || window;\n                    let running = false;\n                    const func = function() {\n                        if (running) {\n                            return;\n                        }\n                        running = true;\n                        requestAnimationFrame(function() {\n                            obj.dispatchEvent(new CustomEvent(name));\n                            running = false;\n                        });\n                    };\n                    obj.addEventListener(type, func);\n                };\n                throttle('resize', 'optimizedResize');\n            })();\n            window.addEventListener('optimizedResize', setVH);\n        }\n    }\n};\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template lang=\"pug\">\n    main.main(:data-state='isScrolling ? \"scrolling\" : \"\"')\n\n        Header\n\n        router-view\n\n        vue-progress-bar\n\n        //- Updated\n\n</template>\n\n<script>\n/* https://github.com/chris-pearce/backpack.css */\nimport 'backpack.css';\n\nimport Header from '@/components/Header.vue';\n\n/* meta info (for title) */\nimport meta from '@/assets/data/meta';\n\n/* 'new content available' badge */\n// const Updated = () => import('@/components/Updated.vue');\n\nexport default {\n    name: 'App',\n\n    metaInfo: {\n        titleTemplate: titleChunk => {\n            return titleChunk ? `${titleChunk} - ${meta.title}` : meta.title;\n        }\n    },\n\n    components: {\n        Header\n    },\n\n    data() {\n        return {\n            isScrolling: false\n        };\n    },\n\n    created() {\n        this.progressOnRouting();\n\n        this.removeLoadingClass();\n    },\n\n    mounted() {\n        this.$Progress.finish();\n\n        this.calculateVH();\n        window.addEventListener('scroll', () => {\n            if (pageYOffset > 100 && !this.isScrolling) {\n                this.isScrolling = true;\n            } else if (pageYOffset <= 100 && this.isScrolling) {\n                this.isScrolling = false;\n            }\n        });\n    },\n\n    methods: {\n        progressOnRouting() {\n            this.$Progress.start();\n\n            this.$router.beforeEach((to, from, next) => {\n                this.$Progress.start();\n                next();\n            });\n\n            this.$router.afterEach(() => {\n                this.$Progress.finish();\n            });\n        },\n\n        removeLoadingClass() {\n            const listener = () => {\n                document.body.classList.remove('js-loading');\n                window.removeEventListener('load', listener);\n            };\n            window.addEventListener('load', listener);\n        },\n\n        calculateVH() {\n            const setVH = () => {\n                const vh = window.innerHeight * 0.01;\n                document.documentElement.style.setProperty('--vh', `${vh}px`);\n            };\n\n            setVH();\n\n            /* resize */\n            (function() {\n                const throttle = function(type, name, obj) {\n                    obj = obj || window;\n                    let running = false;\n                    const func = function() {\n                        if (running) {\n                            return;\n                        }\n                        running = true;\n                        requestAnimationFrame(function() {\n                            obj.dispatchEvent(new CustomEvent(name));\n                            running = false;\n                        });\n                    };\n                    obj.addEventListener(type, func);\n                };\n                throttle('resize', 'optimizedResize');\n            })();\n            window.addEventListener('optimizedResize', setVH);\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\">\n/* import npm styles (if needed) */\n@import '~poly-fluid-sizing';\n\n/* import fonts (only in App.vue) */\n@import 'assets/css/fonts.scss';\n\n/* import vars (repeat in all .vue files) */\n@import 'assets/css/vars.scss';\n\n/* reduce motion */\n@media screen and (prefers-reduced-motion: reduce), (update: slow) {\n    * {\n        animation-duration: 0.001ms !important;\n        animation-iteration-count: 1 !important;\n        transition-duration: 0.001ms !important;\n    }\n}\n\n/* start animation when js loaded */\nbody.js-loading *,\nbody.js-loading *::before,\nbody.js-loading *::after {\n    animation-play-state: paused !important;\n}\n\n/* main styles */\nbody {\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    text-rendering: optimizeLegibility;\n    font-family: var(--font-main);\n    font-weight: 400;\n    font-size: 18px;\n    line-height: 1.4;\n    background: var(--color-main-bg);\n    color: var(--color-main-text);\n\n    $mapFontSize: (\n        320px: 12px,\n        1440px: 15px,\n        1920px: 20px\n    );\n    @include poly-fluid-sizing('font-size', $mapFontSize);\n}\n\n.main {\n    position: relative;\n    margin: 0;\n    padding-top: constant(safe-area-inset-top);\n    padding-right: constant(safe-area-inset-right);\n    padding-bottom: constant(safe-area-inset-bottom);\n    padding-left: constant(safe-area-inset-left);\n}\n</style>\n"]}]}